// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos-layout/internal/biz"
	"github.com/go-kratos/kratos-layout/internal/conf"
	"github.com/go-kratos/kratos-layout/internal/data"
	"github.com/go-kratos/kratos-layout/internal/data/model"
	"github.com/go-kratos/kratos-layout/internal/server"
	"github.com/go-kratos/kratos-layout/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(application *conf.Application, confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData)
	greeterMapper := model.NewGreeterMapper(db)
	universalClient := data.NewCache(confData)
	cache := data.NewGreeterCache(universalClient)
	greeterRepo := data.NewGreeterRepo(greeterMapper, cache, logger)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
	greeterService := service.NewGreeterService(greeterUsecase, logger)
	grpcServer := server.NewGRPCServer(confServer, greeterService, logger)
	greeterServiceV2 := service.NewGreeterServiceV2(greeterUsecase, logger)
	httpServer := server.NewHTTPServer(confServer, greeterService, greeterServiceV2, logger)
	mainRegistrySet := NewRegistrySet(application)
	app := newApp(logger, grpcServer, httpServer, mainRegistrySet)
	return app, func() {
	}, nil
}
